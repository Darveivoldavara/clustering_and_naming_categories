import re
import json

import pandas as pd
import numpy as np

from bert_score import score


def summarization(df, group_cols, text_col, *replace_strings):
    summarized = df.groupby(group_cols, as_index=False).agg({text_col: " ".join})

    for string in replace_strings:
        summarized[text_col] = (
            summarized[text_col].str.lower().replace(string, "", regex=True)
        )

    return summarized


def get_summary(df, client, model="gpt-3.5-turbo-1106", seed=None, scores=False):
    def generate_summary(text):
        response = client.chat.completions.create(
            model=model,
            seed=seed,
            messages=[
                {
                    "role": "system",
                    "content": "Выдели из полученного текста только важные для сервисного центра по ремонту бытовой техники, куда обращается клиент данным текстом, фразы с вопросами, запросами клиента, только когда он хочет что-то выяснить, обращается по поводу какой-то проблемы, заявляет о ней. НЕ ВЫВОДИ НЕНУЖНЫЕ ДЕТАЛИ, такие как адреса, время, телефоны, номера и тому подобное. ПЕРЕЧИСЛЕННОЕ - ЛИШНЯЯ ИНФОРМАЦИЯ. Твоя конечная цель - донести до руководства, с какими запросами от клиентов в первую очередь сталкиваются сотрудники компании. Выводи одной строкой, но состоящей из ОТДЕЛЬНЫХ уникальных предложений, каждое из которых будет содержать весь необходимый контекст, чтобы взглянув на предложение, можно было понять, о чём речь, не видя остальных прердложений. Для этого сначала перефразируй каждую фразу в отдельное предложение так, чтобы оно выглядело понятным и самодостаточным, но используй только исходную смысловую информацию во всём тексте, не придумывай НИКАКУЮ свою. ТОЛЬКО если ты не можешь выделить требуемую информацию, вместо самостоятельно генерируемого ответа выводи: Нет ключевой информации.",
                },
                {
                    "role": "user",
                    "content": "але але да але але да да да сегодня бедняки да подъезжайте нет проблем да да да но вы поняли что у нас каждая дверь морозильной камеры или сама русловая уплотнительная резинка нужда нет ну в этот самый раз и фрагменты и у неё там ну вы же только бутылку хотите посмотреть ничего не делая как я вам могу скинуть размеры я в интернете смотрела да хорошо хорошо проще.",
                },
                {
                    "role": "assistant",
                    "content": "У нас проблема с уплотнительной резинкой или дверью морозильной камеры. Вы только бутылку хотите посмотреть, как я могу вам передать размеры?",
                },
                {"role": "user", "content": text},
            ],
        )
        return response.choices[0].message.content

    def compute_scores(row):
        P, R, F1 = score([row["result"]], [row["text"]], lang="ru")
        return pd.Series([P.item(), R.item(), F1.item()])

    df["result"] = df["text"].apply(generate_summary)
    if scores:
        df[["precision", "recall", "f1"]] = df.apply(compute_scores, axis=1)

    return df


def get_contacts(df, client, model="gpt-3.5-turbo-1106", seed=None):
    def generate_contacts(text):
        response = client.chat.completions.create(
            model=model,
            seed=seed,
            response_format={"type": "json_object"},
            messages=[
                {
                    "role": "system",
                    "content": "Ты - профессиональный редактор, копирайтер и филолог с многолетним стажем. Ты специализируешься на поиске и выделении запрашиваемой информации из текста. Я готов заплатить тебе за хорошее правильное решение до 200$ в зависимости от его качества. В представленном далее тексте разговора клиентов и сотрудников сервисного центра по ремонту бытовой техники ищи следующую информацию: ТОЛЬКО первую строку адреса без города, заканчивающуюся на номере ДОМА, ДЕСЯТИЗНАЧНЫЙ номер телефона, СЕМИЗНАЧНЫЙ номер заявки/обращения. Ответ дай в виде подобной JSON структуры: {'адрес': 'найденный адрес', 'телефон': 'найденный телефон', 'заявка': 'найденная заявка'}. Если что-то из этого не было ЯВНО найдено, прописывай там пустую строку - 'заявка': '', 'телефон': '' и тому подобное. Если в тексте есть адрес Вагоноремонтная, 10, строение 1 или похожий, то ищи и выводи другой адрес в тексте",
                },
                {
                    "role": "user",
                    "content": "здравствуйте сервисного центра оператор ольга чем могу вам помочь да пожалуйста как вам можно обращаться название половинка таким как что не работает таким находитесь в москве и московской области ближайший вы сегодня мастер перезванивает в течение ближайших двух часов ответить на вопросы и подберёт время для визита откуда о нас узнали посмотрите пожалуйста в какой канал смотрится на тв не знаете затрудняетесь да ничего страшного хорошо телефончик ваш продиктуйте пожалуйста можно можно в любой да пасиб улица скакать пожалуйста выезд на адрес бесплатно да а дальше мастер да скажет вам все улица какая у вас улица номер думаю квартирам подъезд заказ этаж домофон метро какое ближайшее от вас давайте проверим вам требуется ремонт холодильника стенного москва набережная новикова прибоя одиннадцать квартира тридцать три подъезд один этаж пять телефон девятьсот три шестьсот пятнадцать сорок один тридцать два все верно татьяна номер заявки у вас будет двести пятнадцать семьдесят пять семьдесят семьдесят пять семьдесят подождите звонок мастер скоро будет звонить спасибо до свидания",
                },
                {
                    "role": "assistant",
                    "content": "{'адрес': 'Новикова Прибоя, 11', 'телефон': '9036154132', 'заявка': '2157570'}",
                },
                {
                    "role": "user",
                    "content": "добрый вечер, наталья. компания айсберг. меня зовут татьяна. вы приглашали нашего мастера, и он оставил нам запрос на ремонт пылесоса. вы хотите пригласить мастера, но мастера у нас не выезжают на ремонт пылесоса. в пылесосы ремонтируем в стационаре. вы можете привезти пылесос к нам на ремонт. мы любые импортные пылесосы ремонтируем. улица вагона ремонтная, москва. а вы в области находитесь? москва. город москва. улица вагона ремонтная. дом 10. строение 1. режим работы стационара с понедельника по пятницу с 9 до 18 часов. суббота и воскресенье выходной. перерывов нет. приезжайте, когда вам удобно. до 18. до 6. к сожалению, на дом не выезжают мастера. леонозова. да. леонозово. мы не ремонтируем, только отечественные. все импортные пылесосы всех брендов мы ремонтируем. я могу сейчас для вас оформить заявку. и вы уже будете ждать. вы не сможете принять службу доставки. если хотите, я перезвоню. я перезвоню вам после 18. давайте накануне 17 позвоню на 18. я хочу вам еще сказать, наталья. вот мы с вами можем сейчас, например, оформить заявку. доставка будет осуществляться в течение нескольких дней. у нас очередь на доставку. как подойдет ваша очередь, вам будет звонить менеджер. она позвонит заранее, чтобы с вами согласовать время и дату, если будет неудобно предложенное. спасибо. может быть, все-таки сейчас вас записать. вы будете ждать звонок менеджера, когда она вам позвонит. и вы с ней уже будете согласовывать дату, когда вам удобно принять машину. так может быть, менеджер вам позвонит и предложит день, когда вам как раз будет удобно. а я вас сейчас запишу, и уже будет идти у нас время, будет идти очередь. позвонит менеджер заранее, и вы сможете с ней все обсудить. хорошо. понадобится указать ваш адрес и контактный телефон. так, а я могу данные взять вот из этой заявки, которую вы оставляли. да? так, и пылесос указано не работает. а что именно с ним? он включается, но звуков нет никаких, не работает. наталья, проверьте адрес. город подольск, улица кирова, дом 9, квартира 79, подъезд 1, 9 этаж. телефон 985-415-1920. нет, вам ничего не нужно приобретать, запчасти у нас есть. так, ну правильно будет сказать, что нет тяги. он включается, но не тянет, правильно? правильно. срок гарантии будет указан в квитанции. мы выдаем квитанцию после ремонта, и в ней указан какой срок гарантии. это зависит от неисправности. номер вашего заказа 8-00-6-0-0-4. 6-0-0-4. ожидайте звонок менеджера из отдела доставки. пожалуйста, всего хорошего. до свидания.",
                },
                {
                    "role": "assistant",
                    "content": "{'адрес': 'Кирова, 9', 'телефон': '9854151920', 'заявка': '8006004'}",
                },
                {
                    "role": "user",
                    "content": "марина, здрасьте. я оставляла заявочку пару дней назад по поводу холодильника на подольскую-1. со мной этот мастер связывался. у меня просто он вдруг начал обратно работать, и мы решили чуть-чуть подождать пару дней, посмотреть. марина, здрасьте. я оставляла заявочку пару дней назад по поводу холодильника на подольскую-1. со мной этот мастер связывался. у меня просто он вдруг начал обратно работать, и мы решили чуть-чуть подождать ага. да. ну, у меня в записной книжке записан. просто обращались, у меня там дисконт на карту. угу, хорошо. спасибо.",
                },
                {
                    "role": "assistant",
                    "content": "{'адрес': 'Подольская, 1', 'телефон': '', 'заявка': ''}",
                },
                {"role": "user", "content": text},
            ],
        )
        result = json.loads(response.choices[0].message.content)
        address = result.get("адрес", "")
        phone = result.get("телефон", "")
        bid = result.get("заявка", "")

        return pd.Series([bid, phone, address])

    df[["llm_bid_id", "llm_contact", "llm_address"]] = df["text"].apply(
        generate_contacts
    )

    return df.replace(r"^\s*$", np.nan, regex=True)


def get_comparsion(df, client, model="gpt-3.5-turbo-1106", seed=None):
    def generate_comparsion(row):
        if pd.isna(row["llm_address"]):
            return np.nan

        response = client.chat.completions.create(
            model=model,
            seed=seed,
            messages=[
                {
                    "role": "system",
                    "content": "Ты - профессиональный редактор, копирайтер и урбанист с многолетним стажем. Ты специализируешься на содержательном сравнивании различных текстов. Я готов заплатить тебе за хорошее правильное решение до 200$ в зависимости от его качества. Далее представлены пары значений адресов. Определи, соотносятся ли они по содержанию.  Для соответствия нужно не обязательно полное посимвольное совпадение, достаточно содержательного. Выведи в ответ ТОЛЬКО либо True, либо False в зависимости от результата",
                },
                {
                    "role": "user",
                    "content": "Юрловский, д.19 - Юрловский проезд, 19",
                },
                {
                    "role": "assistant",
                    "content": "True",
                },
                {
                    "role": "user",
                    "content": "Верхненольная, д.13 - Верхняя Нольная, 13",
                },
                {
                    "role": "assistant",
                    "content": "True",
                },
                {
                    "role": "user",
                    "content": "Авиаторов Балтики, д.9, корп.1 - Авиатор в Балтике, 9, корпус 1",
                },
                {
                    "role": "assistant",
                    "content": "True",
                },
                {
                    "role": "user",
                    "content": "Рассохина, д.13 - Рассохина, 56",
                },
                {
                    "role": "assistant",
                    "content": "False",
                },
                {
                    "role": "user",
                    "content": "Ленина, д.10, корп.4 - Ленина, 4",
                },
                {
                    "role": "assistant",
                    "content": "False",
                },
                {
                    "role": "user",
                    "content": "Аэродромная, д.15, корп.1 - Аэродромная, 15",
                },
                {
                    "role": "assistant",
                    "content": "True",
                },
                {
                    "role": "user",
                    "content": "Композиторов, д.29, корп.3 - Композитора 29, корпус 3",
                },
                {
                    "role": "assistant",
                    "content": "True",
                },
                {
                    "role": "user",
                    "content": "Новая Басманная, д.2, корп.4 - Новая Басманная, 2, корпус 1",
                },
                {
                    "role": "assistant",
                    "content": "False",
                },
                {
                    "role": "user",
                    "content": "Щёлковское, д.46 - Щелковское шоссе, 46",
                },
                {
                    "role": "assistant",
                    "content": "True",
                },
                {
                    "role": "user",
                    "content": "Композиторов, д.29, корп.3 - Композиторов, 29, корпус 3, квартира 239",
                },
                {
                    "role": "assistant",
                    "content": "True",
                },
                {"role": "user", "content": f'{row["address"]} - {row["llm_address"]}'},
            ],
        )

        return response.choices[0].message.content

    df["same_address"] = df.apply(generate_comparsion, axis=1)

    return df


def clean_text(df, first_filter, second_filter, third_filter):
    def re_text(text):
        text = text.replace('"', "")
        text = text.replace("\n", " ")
        text = re.sub(r"\b\d\.\s*", "", text)
        text = re.sub(r"(?<=[\.?])\s+", "", text)
        text = re.sub(r"(?<!\s)-\s", "", text)
        fragments = re.split(r"(?<=[\.?])", text)
        fragments = [frag.lstrip() for frag in fragments if frag.strip()]
        return fragments

    df = df[~df.result.str.contains(first_filter, case=False)].reset_index(drop=True)

    fragments = df.result.apply(re_text)
    clean = pd.DataFrame(
        {
            "linkedid": df.linkedid.repeat(fragments.apply(len)).values,
            "text": [frag for list in fragments for frag in list],
        }
    )
    clean = clean[~clean.text.str.contains(second_filter, case=False)]
    clean = clean[clean.text.str.contains(third_filter, regex=True)].reset_index(
        drop=True
    )

    return clean


def clean_json(data):
    pattern = re.compile(r"\[\n{\n.*?model': '.*?'", re.DOTALL)
    cleaned_data = []

    for item in data:
        updated_item = {}
        for key, value in item.items():
            new_value = re.sub(pattern, "", value)
            updated_item[key] = new_value
        cleaned_data.append(updated_item)

    return cleaned_data


def parse_data(text, *keys):
    values = []
    for key in keys:
        match = re.search(rf"'{key}': '([^']+)'", text)
        values.append(match.group(1).split(" ")[0] if match else None)
    return values
